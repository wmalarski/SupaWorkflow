DROP TRIGGER IF EXISTS set_version ON message;
DROP SEQUENCE IF EXISTS version;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS replicache_client;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS workflow;
DROP TABLE IF EXISTS template;
DROP TABLE IF EXISTS team_member;
DROP TABLE IF EXISTS team;
DROP TABLE IF EXISTS organization_member;
DROP TABLE IF EXISTS organization;
DROP TABLE IF EXISTS profile;
DROP TABLE IF EXISTS assignee;

-- Stores user profile information
CREATE TABLE profile (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  user_id UUID NOT NULL UNIQUE,
  avatar UUID
);

-- Stores organization data    
CREATE TABLE organization (  
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  author_id BIGINT NOT NULL REFERENCES profile,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  hash TEXT NOT NULL DEFAULT MD5(random()::text),
  avatar UUID
);

-- Stores organization data    
CREATE TABLE organization_member (  
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id BIGINT NOT NULL REFERENCES profile,
  organization_id BIGINT NOT NULL REFERENCES organization,
  role TEXT NOT NULL,
  UNIQUE (profile_id, organization_id)
);

-- Stores organization team    
CREATE TABLE team (  
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  organization_id BIGINT NOT NULL REFERENCES organization,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  color TEXT NOT NULL DEFAULT '#ff0000',
  avatar UUID
);

-- Stores organization team members    
CREATE TABLE team_member (  
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id BIGINT NOT NULL REFERENCES profile,
  team_id BIGINT NOT NULL REFERENCES team,
  role TEXT NOT NULL,
  UNIQUE (profile_id, team_id)
);

-- Stores workflow templates    
CREATE TABLE template (  
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  organization_id BIGINT NOT NULL REFERENCES organization,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  avatar UUID
);

-- Stores workflows    
CREATE TABLE workflow (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  organization_id BIGINT NOT NULL REFERENCES organization,
  template_id BIGINT NOT NULL REFERENCES template,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  avatar UUID
);

-- Stores assignee for each workflow    
CREATE TABLE assignee (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workflow_id BIGINT NOT NULL REFERENCES workflow,
  team_member_id BIGINT NOT NULL REFERENCES team_member
);

-- Stores messages    
CREATE TABLE message (      
    id VARCHAR(21) PRIMARY KEY NOT NULL,      
    template_id BIGINT NOT NULL REFERENCES template,
    workflow_id BIGINT REFERENCES workflow,
    state JSON NOT NULL,
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    deleted boolean NOT NULL DEFAULT false
);

-- Stores last mutation ID for each Replicache client    
CREATE TABLE replicache_client (
    id VARCHAR(36) PRIMARY KEY NOT NULL,      
    last_mutation_id BIGINT NOT NULL
);

-- Sync between users and profile tables
CREATE OR REPLACE FUNCTION signup_copy_to_profile_table()
RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO public.profile (user_id, name)
    VALUES(new.id, new.email);
  
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS signup_copy on auth.users;
CREATE TRIGGER signup_copy
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE PROCEDURE signup_copy_to_profile_table();

-- Create default organization for new profile
CREATE OR REPLACE FUNCTION create_default_organization()
RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO public.organization (author_id, name, description)
    VALUES(new.id, new.name, '');
  
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS default_organization on public.profile;
CREATE TRIGGER default_organization
AFTER INSERT ON public.profile
FOR EACH ROW EXECUTE PROCEDURE create_default_organization();

-- Add author as member to organization
CREATE OR REPLACE FUNCTION create_default_organization_member()
RETURNS TRIGGER AS $$
  BEGIN
    INSERT INTO public.organization_member (profile_id, organization_id, role)
    VALUES(new.author_id, new.id, 'owner');
  
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS default_organization_member on public.organization;
CREATE TRIGGER default_organization_member
AFTER INSERT ON public.organization
FOR EACH ROW EXECUTE PROCEDURE create_default_organization_member();

-- Update updated_at time
create extension if not exists moddatetime schema extensions;

DROP TRIGGER IF EXISTS message_updated_at on public.message;
create trigger message_updated_at 
before update on public.message 
for each row execute procedure moddatetime (updated_at);


-- Add author as member to organization
CREATE
OR REPLACE FUNCTION invite_to_organization(
  organization_id BIGINT,
  input_email TEXT,
  input_role TEXT
)  RETURNS void language plpgsql SECURITY DEFINER as $$

begin

INSERT INTO
  organization_member (profile_id, role, organization_id)
select
  public.profile.id as profile_id,
  input_role,
  organization_id
from
  auth.users
  inner join public.profile on auth.users.id = public.profile.user_id
where
  auth.users.email = input_email;

end;
$$;
